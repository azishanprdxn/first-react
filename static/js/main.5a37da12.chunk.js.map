{"version":3,"sources":["serviceWorker.js","header/Header.js","main/Card.js","ScrollToTop.js","main/Main.js","footer/Footer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","handleClick","event","activeURL","document","querySelectorAll","i","length","className","target","to","title","onClick","this","Component","Card","props","name","src","alt","post","ScrollToTop","pathname","useLocation","useEffect","scrollTo","Main","path","component","Users","About","Home","state","data","axios","get","then","response","setState","catch","error","console","log","lists","map","list","key","id","body","userArray","cardDetails","cardDetail","Footer","onload","App","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCmBSC,G,kNA7BbC,YAAc,SAACC,GAEb,IADA,IAAMC,EAAYC,SAASC,iBAAiB,YACnCC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpCH,EAAUG,GAAGE,UAAY,GAE3BN,EAAMO,OAAOD,UAAY,U,uDAIzB,OACE,gCACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAME,GAAG,IAAIC,MAAM,OAAOC,QAASC,KAAKZ,aAAxC,SAEF,4BACE,kBAAC,IAAD,CAAMS,GAAG,SAASC,MAAM,QAAQC,QAASC,KAAKZ,aAA9C,UAEF,4BACE,kBAAC,IAAD,CAAMS,GAAG,SAASC,MAAM,QAAQC,QAASC,KAAKZ,aAA9C,iB,GArBOa,c,wBCSNC,E,uKAZX,OACE,yBAAKP,UAAU,WACb,yBAAKA,UAAU,UAAUG,MAAOE,KAAKG,MAAMC,MACzC,yBAAKC,IAAG,sCAAiCL,KAAKG,MAAMC,MAAQE,IAAI,WAChE,0CAAgBN,KAAKG,MAAMC,MAC3B,qCAAWJ,KAAKG,MAAMI,Y,GAPbN,aCUJO,EATK,WAAO,IACjBC,EAAaC,cAAbD,SAKR,OAJAE,qBAAU,WACR5B,OAAO6B,SAAS,EAAG,KAClB,CAACH,IAEG,MCCHI,E,uKAEF,OACE,8BAGE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWG,U,GAVlBjB,aAiBNiB,EAAO,WAClB,OACE,6BACE,mDAKOD,EAAb,4MACEE,MAAQ,CACNC,KAAM,IAFV,kEAKuB,IAAD,OAElBC,IAAMC,IAAI,8CACPC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEL,KAAMI,EAASJ,UAEhCM,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAZpB,+BAgBY,IAAD,OACDG,EAAQ9B,KAAKmB,MAAMC,KAAKW,KAAI,SAACC,EAAMvC,GACvC,OACE,wBAAIwC,IAAK,EAAKd,MAAMC,KAAK3B,GAAGyC,IACzB,EAAKf,MAAMC,KAAK3B,GAAGyC,GADtB,KAC4B,EAAKf,MAAMC,KAAK3B,GAAGK,MAC7C,2BAAI,EAAKqB,MAAMC,KAAK3B,GAAG0C,UAK7B,OACE,yBAAKxC,UAAU,cACb,4BAAKmC,QA5Bb,GAA2B7B,aAkCde,EAAb,uKAEI,IAAMoB,EAAY,CAChB,CACEF,GAAI,EACJ9B,KAAM,gBACNG,KAAM,iBAER,CACE2B,GAAI,EACJ9B,KAAM,YACNG,KAAM,iBAER,CACE2B,GAAI,EACJ9B,KAAM,iBACNG,KAAM,iBAER,CACE2B,GAAI,EACJ9B,KAAM,kBACNG,KAAM,kBAIJ8B,EAAcD,EAAUL,KAAI,SAACO,EAAY7C,GAC7C,OAAO,kBAAC,EAAD,CAAMwC,IAAKG,EAAU3C,GAAGyC,GAAI9B,KAAMgC,EAAU3C,GAAGW,KAAMG,KAAM6B,EAAU3C,GAAGc,UAGjF,OACE,6BACE,qCACA,yBAAKZ,UAAU,kBACZ0C,QAjCX,GAA2BpC,aAwCZY,IChGA0B,G,6KARX,OACE,gCACE,6E,GAJatC,c,MCKrBlB,OAAOyD,OAAS,WAGd,IADA,IAAMlD,EAAYC,SAASC,iBAAiB,YACnCC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpCH,EAAUG,GAAGE,UAAY,GAEM,MAA7BZ,OAAOC,SAASyB,WAClBnB,EAAU,GAAGK,UAAY,UAEM,WAA7BZ,OAAOC,SAASyB,WAClBnB,EAAU,GAAGK,UAAY,UAEM,WAA7BZ,OAAOC,SAASyB,WAClBnB,EAAU,GAAGK,UAAY,W,IAgBd8C,E,uKAVX,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUxC,aCjBlByC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrD,SAASsD,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.5a37da12.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n  handleClick = (event) => {\r\n    const activeURL = document.querySelectorAll('header a');\r\n    for (let i = 0; i < activeURL.length; i++) {\r\n      activeURL[i].className = '';\r\n    }\r\n    event.target.className = 'active';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\" title=\"Home\" onClick={this.handleClick}>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/about\" title=\"About\" onClick={this.handleClick}>About</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/users\" title=\"Users\" onClick={this.handleClick}>Users</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"flexbox\">\r\n        <div className=\"content\" title={this.props.name}>\r\n          <img src={`https://joeschmoe.io/api/v1/${this.props.name}`} alt=\"Avatar\" />\r\n          <h2>My name is {this.props.name}</h2>\r\n          <p>I am a {this.props.post}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollToTop;","import React, { Component } from 'react';\r\nimport {\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nimport Card from './Card';\r\nimport ScrollToTop from './../ScrollToTop';\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <main>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n        renders the first one that matches the current URL. */}\r\n        <ScrollToTop />\r\n        <Switch>\r\n          <Route path=\"/users\" component={Users} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/\" component={Home} />\r\n        </Switch>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <div>\r\n      <h2>This is Home Page</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport class About extends Component {\r\n  state = {\r\n    data: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Axios\r\n    axios.get('https://jsonplaceholder.typicode.com/posts')\r\n      .then(response => {\r\n        this.setState({ data: response.data });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const lists = this.state.data.map((list, i) => {\r\n      return (\r\n        <li key={this.state.data[i].id}>\r\n          {this.state.data[i].id}. {this.state.data[i].title}\r\n          <p>{this.state.data[i].body}</p>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"data-title\">\r\n        <ul>{lists}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class Users extends Component {\r\n  render() {\r\n    const userArray = [\r\n      {\r\n        id: 1,\r\n        name: 'Zishan Ansari',\r\n        post: 'Web Developer'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Anonymous',\r\n        post: 'Web Developer'\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Anonymous User',\r\n        post: 'Web Developer'\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'Anonymous Three',\r\n        post: 'Web Developer'\r\n      },\r\n    ]\r\n\r\n    const cardDetails = userArray.map((cardDetail, i) => {\r\n      return <Card key={userArray[i].id} name={userArray[i].name} post={userArray[i].post} />\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h2>Users</h2>\r\n        <div className=\"flex-container\">\r\n          {cardDetails}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <p>&copy; Copyright 2020. All Rights Reserved.</p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Header from './header/Header';\r\nimport Main from './main/Main';\r\nimport Footer from './footer/Footer';\r\nimport './App.css';\r\n\r\nwindow.onload = () => {\r\n  // Active URL\r\n  const activeURL = document.querySelectorAll('header a');\r\n  for (let i = 0; i < activeURL.length; i++) {\r\n    activeURL[i].className = '';\r\n  }\r\n  if (window.location.pathname === '/') {\r\n    activeURL[0].className = 'active';\r\n  }\r\n  if (window.location.pathname === '/about') {\r\n    activeURL[1].className = 'active';\r\n  }\r\n  if (window.location.pathname === '/users') {\r\n    activeURL[2].className = 'active';\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Header />\r\n        <Main />\r\n        <Footer />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// My Imports\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}